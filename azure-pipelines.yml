trigger:
- master

pool:
    vmImage: 'windows-latest'

variables:
    buildConfiguration: 'Release'
steps:    
# - task: NuGetCommand@2
#   inputs:
#     command: 'pack'
#     packagesToPack: '**/*.csproj'
#     versioningScheme: 'byPrereleaseNumber'
#     majorVersion: '1'
#     minorVersion: '0'
#     patchVersion: '0'

# The first task is the dotnet command build, pointing to our csproj file
- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
    projects: 'gROPC.Package/gROPC.Package.csproj'

# The second task is dotnet pack command again pointing to the csproj file
# The nobuild means the project will not be compiled before running pack, because its already built in above step
- task: DotNetCoreCLI@2
  displayName: "dotnet pack"
  inputs:
    command: 'pack'
    packagesToPack: 'gROPC.Package/gROPC.Package.csproj'
    nobuild: true
    versioningScheme: 'byPrereleaseNumber'
    majorVersion: '1'
    minorVersion: '0'
    patchVersion: '0'

# - task: NuGetCommand@2
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
#     nuGetFeedType: 'internal'
#     publishVstsFeed: 'PPS_Packages/PPSNuget'
#     feedsToUse: 'select'

    
- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'PPS_Packages/PPSNuget'
    allowPackageConflicts: true